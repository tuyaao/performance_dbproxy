<?xml version="1.0" encoding="UTF-8"?>

<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

	<servlet>
		<servlet-name>jersey-serlvet</servlet-name>
		<servlet-class>com.sun.jersey.spi.spring.container.servlet.SpringServlet</servlet-class>
		<init-param>
			<param-name>com.sun.jersey.config.property.packages</param-name>
			<param-value>com.free4lab.moniter.client</param-value><!-- 开始的时候都哪些来验证jersy注解 -->
		</init-param>
		<init-param>
			<param-name>com.sun.jersey.config.feature.Trace</param-name>
			<param-value>true</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>jersey-serlvet</servlet-name>
		<url-pattern>/performancedbproxy/*</url-pattern>
	</servlet-mapping>

	<!-- Servlet Context Listener -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath*:persistence-datasource-context.xml
			classpath*:persistence-hibernate-session.xml
			classpath*:bean-context.xml
		</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>
	
	<!-- Servlet Filters -->
	<filter>
		<description>编码设置</description>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!--  freelol-collecter 分发，这里用于验证
	<servlet>
		<servlet-name>api</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath*:api-config.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>api</servlet-name>
		<url-pattern>/push/batchlog</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>api</servlet-name>
		<url-pattern>/push/batchdata</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>api</servlet-name>
		<url-pattern>/get/search</url-pattern>
	</servlet-mapping>
	 -->


	<!-- 解释命名空间 -->
	<!-- xsi全名：xml schema instance web-app是web.xml的根节点标签名称 version是版本的意思 xmlns是web.xml文件用到的命名空间 
		xmlns:xsi是指web.xml遵守xml规范 xsi:schemaLocation是指具体用到的schema资源 -->
	<!-- 首先这个文件是一个xml文件，那么他里面的所有内容都符合xml语法规范， 开头的"project"标签的最外层同样也是一个xml文件的标签，后面那一长串也就是所谓的属性，其中xmlns表示命名空间， 
		xmlns="http://maven.apache.org/POM/4.0.0" 这表示默认命名空间，而下面xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		这个命名空间里面的元素或者属性就必须要以xsi:这种方式来写，比如schemaLocation就是他的一个属性，所以写成xsi:schemaLocation， 
		而默认命名空间不带类似xsi这种，其实xml标签名称有个专业叫法叫做QName，而如果没有前面的xsi:这种一般叫做NCName。 所以你看mvn里面的"dependency"标签这种就是默认命名空间下面的元素，最后那一行就表示把定义这个命名空间的schema文件给引用进来， 
		好让eclipse这类型工具能够解析和验证你的xml文件是否符合语法规范。等同于 <import namespace="xxx" schemaLocation="xxx.xsd"/> -->
	<!-- xmlns:tx:关于切面编程
	     xmlns:context:关于spring上下文，包括加载资源文件 -->
	<!-- 解释context-param & listener -->
	<!-- 作用：该元素用来声明应用范围(整个WEB项目)内的上下文初始化参数。 param-name 设定上下文的参数名称。必须是唯一名称 param-value 
		设定的参数名称的值 初始化过程： 在启动Web项目时，容器(比如Tomcat)会读web.xml配置文件中的两个节点<listener>和<contex-param>。 
		接着容器会创建一个ServletContext(上下文),应用范围内即整个WEB项目都能使用这个上下文。 接着容器会将读取到<context-param>转化为键值对,并交给ServletContext。 
		容器创建<listener></listener>中的类实例,即创建监听（备注：listener定义的类可以是自定义的类但必须需要继承ServletContextListener）。 
		在监听的类中会有一个contextInitialized(ServletContextEvent event)初始化方法，在这个方法中可以通过event.getServletContext().getInitParameter("contextConfigLocation") 
		来得到context-param 设定的值。在这个类中还必须有一个contextDestroyed(ServletContextEvent event) 
		销毁方法.用于关闭应用前释放资源，比如说数据库连接的关闭。 得到这个context-param的值之后,你就可以做一些操作了.注意,这个时候你的WEB项目还没有完全启动完成.这个动作会比所有的Servlet都要早。 
		由上面的初始化过程可知容器对于web.xml的加载过程是context-param >> listener >> fileter >> servlet 
		如何使用 页面中 ${initParam.contextConfigLocation} 
		Servlet中 String paramValue=getServletContext().getInitParameter("contextConfigLocation") -->

</web-app>
        